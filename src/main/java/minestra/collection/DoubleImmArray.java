package minestra.collection;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.OptionalDouble;
import java.util.Random;
import java.util.function.DoubleBinaryOperator;
import java.util.function.DoubleConsumer;
import java.util.function.DoubleFunction;
import java.util.function.DoublePredicate;
import java.util.function.DoubleSupplier;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.DoubleUnaryOperator;
import java.util.stream.DoubleStream;

/**
 * An immutable array of primitive <code>double</code>.
 */
public interface DoubleImmArray {

    /**
     * Returns a new array of the specified values.
     * @param a int array
     * @return new array
     */
    static DoubleImmArray of(double... a) {
        return new DoubleImmArrayImpl(a);
    }

    /**
     * Returns a new array of the specified values.
     * @param collection collection
     * @return new array
     */
    static DoubleImmArray of(Collection<Double> collection) {
        return ImmArray.of(collection).mapToDouble(Double::doubleValue);
    }

    /**
     * Returns a new array of the specified values.
     * @param stream stream
     * @return new array
     */
    static DoubleImmArray of(DoubleStream stream) {
        return of(stream.toArray());
    }

    /**
     * Returns a new array of generating with specified size and generator.
     * @param size array size to generate
     * @param generator generator
     * @return the array
     */
    static DoubleImmArray generate(int size, DoubleSupplier generator) {
        double[] a = new double[size];
        for (int i = 0; i < size; i++) {
            a[i] = generator.getAsDouble();
        }
        return of(a);
    }

    /**
     * Returns the array of values which are generated by {@link Random}.
     * If it is necessary to use secure random, use <code>generate(int, IntSupplier)</code> with secure random API.
     * @param size array size
     * @param min minimum value
     * @param max maximum value
     * @return the array
     */
    static DoubleImmArray random(int size, double min, double max) {
        final double distance = max - min + 0.000000000d;
        Random r = new Random(System.currentTimeMillis());
        double[] a = new double[size];
        for (int i = 0; i < size; i++) {
            a[i] = min + (int) (r.nextDouble() * distance);
        }
        return of(a);
    }

    /**
     * Returns the concatenated array of all specified arrays.
     * @param first the first array
     * @param rest the rest of arrays
     * @return the concatenated array
     */
    default DoubleImmArray concat(DoubleImmArray first, DoubleImmArray... rest) {
        final int selfLength = size();
        final int firstLength = first.size();
        int newLength = selfLength;
        newLength += firstLength;
        for (DoubleImmArray o : rest) {
            newLength += o.size();
        }
        // XXX copy twice
        double[] a = Arrays.copyOf(toArray(), newLength);
        int p = selfLength;
        System.arraycopy(first.toArray(), 0, a, p, firstLength);
        p += firstLength;
        for (DoubleImmArray o : rest) {
            final int length = o.size();
            System.arraycopy(o.toArray(), 0, a, p, length);
            p += length;
        }
        return of(a);
    }

    /**
     * Returns the number of elements in this array.
     * @return the number of elements
     */
    int size();

    /**
     * Returns the element at the specified index in this array.
     * @param index index of an desired element
     * @return the element
     */
    double at(int index);

    /**
     * Returns an empty array.
     * @return the empty array
     */
    static DoubleImmArray empty() {
        return DoubleImmArrayImpl.EMPTY;
    }

    /**
     * Performs apply function as an action to each element of this array.
     * @param action action to apply to each element
     */
    default void forEach(DoubleConsumer action) {
        final int n = size();
        for (int i = 0; i < n; i++) {
            action.accept(at(i));
        }
    }

    /**
     * Returns whether this array is empty.
     * @return <code>true</code> if this is empty.
     */
    default boolean isEmpty() {
        return size() == 0;
    }

    /**
     * Returns whether the element which satisfies predicate exists in this array.
     * @param pred predicate
     * @return <code>true</code> if the element exists
     */
    default boolean exists(DoublePredicate pred) {
        final int n = size();
        for (int i = 0; i < n; i++) {
            if (pred.test(at(i))) {
                return true;
            }
        }
        return false;
    }

    /**
     * Returns an optional value which satisfies specified predicate from the beginning in this array.
     * @param pred predicate
     * @return the optional value
     */
    default OptionalDouble find(DoublePredicate pred) {
        return find(pred, 0);
    }

    /**
     * Returns an optional value which satisfies specified predicate after the specified index in this array.
     * @param pred predicate
     * @param start number of beginning index to find
     * @return the element as an optional value
     */
    default OptionalDouble find(DoublePredicate pred, int start) {
        final int n = size();
        for (int i = start; i < n; i++) {
            final double value = at(i);
            if (pred.test(value)) {
                return OptionalDouble.of(value);
            }
        }
        return OptionalDouble.empty();
    }

    /**
     * Returns the index of element which is the first match of the specified predicate in this array.
     * @param pred predicate
     * @return number of the index, returns <code>-1</code> if not found
     */
    default int indexWhere(DoublePredicate pred) {
        final int n = size();
        for (int i = 0; i < n; i++) {
            if (pred.test(at(i))) {
                return i;
            }
        }
        return -1;
    }

    /**
     * Returns the first element of this array if it is not empty.
     * @return the first element as an optional value
     */
    default OptionalDouble head() {
        return (size() == 0) ? OptionalDouble.empty() : OptionalDouble.of(at(0));
    }

    /**
     * Returns the tail elements of this array if exists.
     * @return the tail elements as an array
     */
    default DoubleImmArray tail() {
        return slice(1, Integer.MAX_VALUE);
    }

    /**
     * Returns a new array of elements that taken out the specified number of from the beginning of this array.
     * @param count count to take
     * @return the array
     */
    default DoubleImmArray take(int count) {
        return (count == 0) ? empty() : slice(0, count - 1);
    }

    /**
     * Returns a new array of elements that taken out while specified predicate matches from the beginning of this array.
     * @param pred predicate
     * @return the array
     */
    default DoubleImmArray takeWhile(DoublePredicate pred) {
        final int index = indexWhere(pred.negate());
        return (index > 0) ? slice(0, index - 1) : empty();
    }

    /**
     * Returns the rest of the array that drops the specified number of elements in this array.
     * @param count count to drop
     * @return the array
     */
    default DoubleImmArray drop(int count) {
        final int n = size();
        return (count >= n) ? empty() : slice(count, n);
    }

    /**
     * Returns the rest of the array that drops elements which the specified predicate matches in this array.
     * @param pred predicate
     * @return the array
     */
    default DoubleImmArray dropWhile(DoublePredicate pred) {
        final int index = indexWhere(pred.negate());
        return (index >= 0) ? drop(index) : empty();
    }

    /**
     * Returns the slice of this array.
     * @param from inclusive index of first
     * @param to exclusive index of end
     * @return the array
     */
    default DoubleImmArray slice(int from, int to) {
        final int n = size() - 1;
        final int to0 = (to < n) ? to : n;
        return new DoubleImmArrayImpl(true, Arrays.copyOfRange(toArray(), from, to0 + 1));
    }

    /**
     * Returns an array created by applying a function to each of the elements of this array.
     * @param mapper function as a mapper
     * @return the array
     */
    default DoubleImmArray map(DoubleUnaryOperator mapper) {
        final int n = size();
        double[] a = new double[n];
        for (int i = 0; i < n; i++) {
            a[i] = mapper.applyAsDouble(at(i));
        }
        return of(a);
    }

    /**
     * Returns an object array created by applying a function to each of the elements of this array.
     * @param <R> type of result array elements
     * @param mapper function as a mapper
     * @return the mapped array
     */
    default <R> ImmArray<R> mapToObj(DoubleFunction<R> mapper) {
        final int n = size();
        List<R> a = new ArrayList<>(n);
        for (int i = 0; i < n; i++) {
            a.add(mapper.apply(at(i)));
        }
        return ImmArray.of(a);
    }

    /**
     * Returns an int array created by applying a function to each of the elements of this array.
     * @param mapper function as a mapper
     * @return the mapped array
     */
    default IntImmArray mapToInt(DoubleToIntFunction mapper) {
        final int n = size();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = mapper.applyAsInt(at(i));
        }
        return IntImmArray.of(a);
    }

    /**
     * Returns a long array created by applying a function to each of the elements of this array.
     * @param mapper function as a mapper
     * @return the mapped array
     */
    default LongImmArray mapToLong(DoubleToLongFunction mapper) {
        final int n = size();
        long[] a = new long[n];
        for (int i = 0; i < n; i++) {
            a[i] = mapper.applyAsLong(at(i));
        }
        return LongImmArray.of(a);
    }

    /**
     * Returns an object array created by applying boxing to each element in this array.
     * @return the object array
     */
    default ImmArray<Double> boxed() {
        return mapToObj(Double::valueOf);
    }

    /**
     * Returns the result that reduce elements of this array with the specified binary operator.
     * @param op binary operator
     * @return the result as optional, or optional empty if this array is empty
     */
    default OptionalDouble reduce(DoubleBinaryOperator op) {
        final int n = size();
        if (n == 0) {
            return OptionalDouble.empty();
        }
        double result = at(0);
        for (int i = 1; i < n; i++) {
            result = op.applyAsDouble(result, at(i));
        }
        return OptionalDouble.of(result);
    }

    /**
     * Returns the result that reduce elements of this array with the specified binary operator.
     * @param identity identity element
     * @param op binary operator
     * @return the result
     */
    default double reduce(double identity, DoubleBinaryOperator op) {
        final int n = size();
        if (n == 0) {
            return identity;
        }
        double result = identity;
        for (int i = 0; i < n; i++) {
            result = op.applyAsDouble(result, at(i));
        }
        return result;
    }

    /**
     * Returns the result of folding the elements of this array by the specified operator.
     * @param value initial value
     * @param f binary operator
     * @return the result
     */
    default double fold(double value, DoubleBinaryOperator f) {
        switch (size()) {
            case 0:
                return value;
            case 1:
                return f.applyAsDouble(value, at(0));
            default:
                return f.applyAsDouble(value, tail().fold(at(0), f));
        }
    }

    /**
     * Returns a new array which consists with unique elements.
     * @return the array
     */
    default DoubleImmArray distinct() {
        return of(stream().distinct());
    }

    /**
     * Returns the result of filtering the elements of this array by specified predicate.
     * @param pred predicate
     * @return the array
     */
    default DoubleImmArray filter(DoublePredicate pred) {
        final int n = size();
        int p = 0;
        double[] a = new double[n];
        for (int i = 0; i < n; i++) {
            double x = at(i);
            if (pred.test(x)) {
                a[p++] = x;
            }
        }
        return new DoubleImmArrayImpl(true, Arrays.copyOf(a, p));
    }

    /**
     * Returns the sum of elements in this array.
     * @return the sum
     */
    double sum();

    /**
     * Returns the product of elements in this array.
     * @return the product
     */
    double product();

    /**
     * Returns the mean value of elements in this array.
     * If this stream is empty, returns empty optional.
     * @return the mean value
     */
    default double average() {
        return sum() / size();
    }

    /**
     * Returns a maximum value as optional in this array.
     * If this stream is empty, returns empty optional.
     * @return the maximum value
     */
    OptionalDouble max();

    /**
     * Returns a minimum value as optional in this array.
     * If this stream is empty, returns empty optional.
     * @return the minimum value
     */
    OptionalDouble min();

    /**
     * Returns new array which is sorted this array in natural order.
     * @return the sorted array
     */
    default DoubleImmArray sort() {
        double[] a = toArray();
        Arrays.sort(a);
        return of(a);
    }

    /**
     * Returns new array which is sorted this array with specified order.
     * @param cmp order
     * @return the sorted array
     */
    default DoubleImmArray sortWith(DoubleComparator cmp) {
        return sortWith(0, size() - 1, cmp);
    }

    /**
     * Returns new array which is sorted this array with specified order.
     * @param fromIndex from
     * @param toIndex to
     * @param cmp order
     * @return the sorted array
     */
    DoubleImmArray sortWith(int fromIndex, int toIndex, DoubleComparator cmp);

    /**
     * Returns new array which is reversed the order of elements in this array.
     * @return the array
     */
    default DoubleImmArray reverse() {
        double[] a = toArray();
        final int size = a.length;
        final int n = a.length / 2;
        for (int i = 0, j = size - 1; i < n; i++, j--) {
            double x = a[j];
            a[j] = a[i];
            a[i] = x;
        }
        return of(a);
    }

    /**
     * Returns this array as a native array.
     * @return the array
     */
    double[] toArray();

    /**
     * Returns the stream which consist same elements in this array.
     * @return the stream
     */
    default DoubleStream stream() {
        return DoubleStream.of(toArray());
    }

}
